name: Update Data (beta)

on:
  push:
    branches: [ beta ]
  workflow_dispatch:
    inputs:
      run_reason:
        description: 'Optional reason for manual beta run'
        required: false
        default: 'manual'

permissions:
  contents: write

jobs:
  aggregate-beta:
    environment: beta
    runs-on: ubuntu-latest
    env:
      PROFILE: capital_region
      # Set COMMIT_DATA=1 to permit committing docs/*.json back to beta.
      COMMIT_DATA: ${{ vars.COMMIT_DATA || '0' }}
      GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
      XAI_API_KEY: ${{ secrets.XAI_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      AUGMENT_WITH_OPENAI: ${{ secrets.AUGMENT_WITH_OPENAI }}
      MAX_RUN_PASSES: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run aggregation (beta)
        id: aggregate
        run: |
          python scripts/aggregate.py || echo 'Aggregation script exited with non-zero status (soft fail).'

      - name: Validate JSON outputs & list meta
        run: |
          python - <<'PY'
          import json, os, sys
          paths = ['docs/events.json','docs/restaurants.json','docs/meta.json']
          for f in paths:
            if not os.path.exists(f):
              print(f'MISSING {f}')
              continue
            try:
              data = json.load(open(f))
              print(f'VALID {f} type={type(data).__name__}')
              if isinstance(data, list) and data and isinstance(data[-1], dict) and '_meta' in data[-1]:
                print(f"  META items_changed={data[-1]['_meta'].get('items_changed')} count={data[-1]['_meta'].get('item_count')}")
              if f.endswith('meta.json'):
                print(json.dumps(data, indent=2)[:400])
            except Exception as e:
              print(f'INVALID {f}: {e}')
          sys.exit(0)
          PY

      - name: Detect dataset changes (meta-based)
        id: changes
        run: |
          python - <<'PY'
          import json, os
          changed_files = []
          for f in ['docs/restaurants.json','docs/events.json']:
            if not os.path.exists(f):
              continue
            try:
              data = json.load(open(f))
              if isinstance(data, list) and data and isinstance(data[-1], dict) and '_meta' in data[-1]:
                if data[-1]['_meta'].get('items_changed', True):
                  changed_files.append(f)
            except Exception as e:
              print('PARSE_FAIL', f, e)
          if changed_files:
            print('Changed datasets:', ' '.join(changed_files))
            with open(os.environ['GITHUB_OUTPUT'],'a') as out:
              out.write('changed=true\n')
              out.write('files='+ ' '.join(changed_files) + '\n')
          else:
            print('No dataset item changes (only timestamps).')
            with open(os.environ['GITHUB_OUTPUT'],'a') as out:
              out.write('changed=false\n')
          PY

      - name: Commit and push updated data
        if: steps.changes.outputs.changed == 'true' && env.COMMIT_DATA == '1'
        run: |
          git config user.name 'github-actions'
          git config user.email 'actions@users.noreply.github.com'
          git add docs/events.json docs/restaurants.json docs/meta.json docs/config.json || true
          git commit -m "chore(beta): update aggregated data (items changed)" || echo 'No commit'
          git push || echo 'Push skipped'

      - name: Skip commit (informational)
        if: steps.changes.outputs.changed == 'true' && env.COMMIT_DATA != '1'
        run: echo "Detected item changes but COMMIT_DATA!=1 so not committing (beta)."

      - name: Upload generated docs JSON (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-json-beta
          path: |
            docs/events.json
            docs/restaurants.json
            docs/meta.json
            docs/config.json

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts-beta
          path: debug/
